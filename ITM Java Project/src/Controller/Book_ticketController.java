package Controller;
/*
 * This class will book the ticket, cancel the ticket and show list of tickets
 */
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.Stage;

import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.ResourceBundle;

import com.mysql.jdbc.PreparedStatement;

import Model.Connector;
import Model.DaoModel_cash_admin;
import Model.daoModel_Cashier;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.ChoiceBox;

public class Book_ticketController extends DaoModel_cash_admin implements Initializable {
	String get_movie_id = "";
	String get_movie_date = "";
	String get_screen_id = "";

	private static ResultSet rs;
	@FXML
	private Button close_button;

	@FXML
	private ComboBox movie_name_db;
	@FXML
	private TextField cust_name;
	@FXML
	private ComboBox combo_screen_id;
	@FXML
	private ComboBox combo_show_date;
	@FXML
	private ComboBox combo_show_time;
	@FXML
	private ComboBox combo_total_seats;
	// @FXML
	// private TextField cost;
	@FXML
	private Label symbol;
	@FXML
	private Label cost;
	@FXML
	private TextField cashier_ticket_id;
	@FXML
	private TableView<Ticket_setter_getters> Dis_Ticket;
	@FXML
	private TableColumn<Ticket_setter_getters, Integer> dis_tckt_id;
	@FXML
	private TableColumn<Ticket_setter_getters, Integer> dis_movie_id;
	@FXML
	private TableColumn<Ticket_setter_getters, Integer> dis_screen;
	@FXML
	private TableColumn<Ticket_setter_getters, String> dis_cust_name;
	@FXML
	private TableColumn<Ticket_setter_getters, String> dis_show_date;
	@FXML
	private TableColumn<Ticket_setter_getters, String> dis_show_time;
	@FXML
	private TableColumn<Ticket_setter_getters, Integer> dis_book_seats;
	@FXML
	private TableColumn<Ticket_setter_getters, Integer> dis_cost;
	daoModel_Cashier dao_cash = new daoModel_Cashier();

	Connector con = new Connector();
	ObservableList<String> data = FXCollections.observableArrayList();
	ObservableList<Ticket_setter_getters> show_all_tickets;

	// Event Listener on Button[#close_button].onAction
	@FXML
	public void exit(ActionEvent event) {
		// TODO Autogenerated
		Stage stage = (Stage) close_button.getScene().getWindow();
		// do what you have to do
		stage.close();
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		try {
			symbol.setText("$");
			ArrayList<String> movieNameArr = new ArrayList<String>();
			String query = "Select movie_name from a_hund_movie;";
			PreparedStatement pst = (PreparedStatement) con.getConnection().prepareStatement(query);
			rs = pst.executeQuery(query);
			while (rs.next()) {
				movieNameArr.add(rs.getString("movie_name"));
				// data.add(rs.getString("movie_name"));

			}

			// System.out.println(data);
			movie_name_db.getItems().setAll(movieNameArr);
			// movie_name_db.setItems(data);
			// movie_name_db.getItems().setAll(data);

			// movie_name_db.setItems(data);
			// movie_name_db.setItems(FXCollections.observableArrayList(data));
			// System.out.println(movie_name_db.getValue());

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		try {

			ObservableList<String> seats = FXCollections.observableArrayList("1", "2", "3", "4", "5", "6", "7", "8",
					"9", "10");
			combo_total_seats.setItems(seats);
			;
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		// try {
		// con.conn1.close();
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
	}// end method

	public void show_date(ActionEvent event) {

		// get Movie ID after selecting the dropdown
		try {
			String get_movie_name = (String) movie_name_db.getValue();
			String movie_id_query = "Select movie_id from a_hund_movie where movie_name='" + get_movie_name + "'";
			PreparedStatement pst = (PreparedStatement) con.getConnection().prepareStatement(movie_id_query);
			rs = pst.executeQuery(movie_id_query);

			while (rs.next()) {
				get_movie_id = rs.getString("movie_id");

			}
			// System.out.println(get_movie_id);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		// get show date of movie from movie id from showdetail table
		try {
			ArrayList<String> get_movie_date = new ArrayList<String>();
			String date_id_query = "Select distinct show_date from a_hund_showdetail where movie_id=" + get_movie_id;
			PreparedStatement pst = (PreparedStatement) con.getConnection().prepareStatement(date_id_query);
			rs = pst.executeQuery(date_id_query);

			while (rs.next()) {
				get_movie_date.add(rs.getString("show_date"));

			}
			combo_show_date.getItems().setAll(get_movie_date);
			// System.out.println(get_movie_id);
			// System.out.println(get_movie_date);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		// try {
		// con.conn1.close();
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
	}

	public void show_screen(ActionEvent event) {
		get_movie_date = (String) combo_show_date.getValue();
		// System.out.println(get_movie_date);
		// System.out.println(get_movie_id);
		try {
			ArrayList<String> get_movie_screen = new ArrayList<String>();
			String screen_id_query = "Select distinct screen_id from a_hund_showdetail where movie_id=" + get_movie_id
					+ " and show_date='" + get_movie_date + "';";
			PreparedStatement pst = (PreparedStatement) con.getConnection().prepareStatement(screen_id_query);
			// pst.setString(1, get_movie_id);
			// pst.setString(2, get_movie_date);
			rs = pst.executeQuery(screen_id_query);

			while (rs.next()) {
				get_movie_screen.add(rs.getString("screen_id"));

			}
			// System.out.println(ah_movie_id);
			// System.out.println(get_movie_date);
			combo_screen_id.getItems().setAll(get_movie_screen);
			// System.out.println(get_movie_id);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		// try {
		// con.conn1.close();
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
	}// end method

	public void show_time(ActionEvent event) {
		// get_movie_date=(String) show_date.getValue();
		get_screen_id = (String) combo_screen_id.getValue();
		// System.out.println(get_movie_date);
		// System.out.println(get_movie_id);
		try {
			ArrayList<String> get_movie_time = new ArrayList<String>();
			String time_id_query = "Select distinct show_time from a_hund_showdetail where movie_id=" + get_movie_id
					+ " and show_date='" + get_movie_date + "' and screen_id=" + get_screen_id + ";";
			PreparedStatement pst = (PreparedStatement) con.getConnection().prepareStatement(time_id_query);
			// pst.setString(1, get_movie_id);
			// pst.setString(2, get_movie_date);
			rs = pst.executeQuery(time_id_query);

			while (rs.next()) {
				get_movie_time.add(rs.getString("show_time"));

			}
			// System.out.println(get_movie_id);
			// System.out.println(get_movie_date);
			// System.out.println(get_screen_id);
			combo_show_time.getItems().setAll(get_movie_time);
			// System.out.println(get_movie_id);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		// try {
		// con.conn1.close();
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
	}// end method

	public void movie_cost(ActionEvent event) {
		// System.out.println(combo_total_seats.getValue());
		cost.setText(combo_total_seats.getValue().toString());
		int movie_cost = 60;
		String ah_seats = (String) combo_total_seats.getValue();
		// System.out.println(ah_seats);
		int myseats = Integer.parseInt(ah_seats);
		// System.out.println(myseats);
		movie_cost = movie_cost * myseats;
		// System.out.println(movie_cost);

		cost.setText(String.valueOf(movie_cost));

		/*
		 * int ah_movie_seats=0; int total_cost=60; ah_movie_seats=(int)
		 * total_seats.getValue(); total_cost=ah_movie_seats*total_cost;
		 * cost.setText(String.valueOf(total_cost));
		 */
	}

	public void Insert_ticket() throws Exception {
		int Movie_cost = 0;
		int get_seats = 0;
		int ah_movie_id = 0;
		int ah_screen_id = 0;
		String get_cost = cost.getText();
		String get_total_seats = (String) combo_total_seats.getValue();
		String get_show_time = (String) combo_show_time.getValue();
		String ah_get_show_date = (String) combo_show_date.getValue();
		String customer_Name;
		customer_Name = cust_name.getText();
		try {
			ah_movie_id = Integer.parseInt(get_movie_id);
			ah_screen_id = Integer.parseInt(get_screen_id);
			get_seats = Integer.parseInt(get_total_seats);
			Movie_cost = Integer.parseInt(get_cost);
			if (customer_Name.matches("[a-zA-Z ]+")) {

				dao_cash.insert_ticket(ah_movie_id, ah_screen_id, customer_Name, ah_get_show_date, get_seats,
						Movie_cost, get_show_time);
			} else {
				Alert insert_ticket_alert = new Alert(AlertType.INFORMATION);
				insert_ticket_alert.setTitle("Wrong Customer Name");
				insert_ticket_alert.setHeaderText(null);
				insert_ticket_alert.setContentText("Please Enter only Text charatcers");
				insert_ticket_alert.showAndWait();
			}
		} catch (Exception e) {

			System.out.println(e.getMessage());
		}

		// System.out.println("Movie_id "+ ah_movie_id);
		// System.out.println("screen_id "+ah_screen_id);
		// System.out.println("Movie_cost " +Movie_cost);
		// System.out.println("totale seats "+get_seats);
		// System.out.println("CNAME "+cust_name.getText());
		// System.out.println("date "+ah_get_show_date);
		// System.out.println("Time "+get_show_time);

	}// end method

	// end method

	public void delete_ticket() {
		int cancel_id;
		Book_ticketController book_tckt = new Book_ticketController();
		try {
			cancel_id = Integer.parseInt(cashier_ticket_id.getText());
			book_tckt.delete_ticket(cancel_id);
		} catch (Exception e) {
			Alert delete_ticket_alert = new Alert(AlertType.INFORMATION);
			delete_ticket_alert.setTitle("Wrong Ticket ID");
			delete_ticket_alert.setHeaderText(null);
			delete_ticket_alert.setContentText("Please Enter only Integers");
			delete_ticket_alert.showAndWait();
		}

	}// end method

	public void display_ticket() {

		show_all_tickets = FXCollections.observableArrayList();
		ResultSet rs;
		Connector DB_con = new Connector();
		try {
			String display_ticket_query = "Select ticket_id,Movie_id,screen_id,Cust_name,show_date,show_time,seats_booked,cost from a_hund_ticket;";
			PreparedStatement pst = (PreparedStatement) DB_con.getConnection().prepareStatement(display_ticket_query);
			rs = pst.executeQuery(display_ticket_query);
			// pst.executeUpdate();
			System.out.println("Display All Ticket");
			while (rs.next()) {
				Ticket_setter_getters tckt = new Ticket_setter_getters();
				tckt.setDisplay_Ticket_id(rs.getInt("ticket_id"));
				tckt.setDisplay_movie_id(rs.getInt("Movie_id"));
				tckt.setDisplay_Screen_id(rs.getInt("screen_id"));
				tckt.setDisplay_customer_name(rs.getString("Cust_name"));
				tckt.setDisplay_show_Date(rs.getString("show_date"));
				tckt.setDisplay_show_time(rs.getString("show_time"));
				tckt.setDisplay_seats_booked(rs.getInt("seats_booked"));
				tckt.setDisplay_cost(rs.getInt("cost"));

				show_all_tickets.add(tckt);
			}

			Dis_Ticket.setItems(show_all_tickets);
			dis_tckt_id
					.setCellValueFactory(new PropertyValueFactory<Ticket_setter_getters, Integer>("display_Ticket_id"));
			dis_movie_id
					.setCellValueFactory(new PropertyValueFactory<Ticket_setter_getters, Integer>("display_movie_id"));
			dis_screen
					.setCellValueFactory(new PropertyValueFactory<Ticket_setter_getters, Integer>("display_Screen_id"));
			dis_cust_name.setCellValueFactory(
					new PropertyValueFactory<Ticket_setter_getters, String>("display_customer_name"));
			dis_show_date
					.setCellValueFactory(new PropertyValueFactory<Ticket_setter_getters, String>("display_show_Date"));
			dis_show_time
					.setCellValueFactory(new PropertyValueFactory<Ticket_setter_getters, String>("display_show_time"));
			dis_book_seats.setCellValueFactory(
					new PropertyValueFactory<Ticket_setter_getters, Integer>("display_seats_booked"));
			dis_cost.setCellValueFactory(new PropertyValueFactory<Ticket_setter_getters, Integer>("display_cost"));
			// System.out.println("View Data");
			rs.close();
			DB_con.conn1.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

}// end class
